generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String         @id @default(cuid())
  email                  String         @unique @db.VarChar(255)
  password_hash          String         @db.VarChar(255)
  name                   String?        @db.VarChar(255)
  emailVerified          DateTime?      @db.Timestamp(6)
  image                  String?
  created_at             DateTime       @default(now()) @db.Timestamp(6)
  updated_at             DateTime       @default(now()) @db.Timestamp(6)
  resetPasswordToken       String?        @unique
  resetPasswordExpires     DateTime?
  emailVerificationToken   String?        @unique
  emailVerificationExpires DateTime?
  viral_rewards_claimed    Boolean        @default(false)
  
  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]
  usageTracking UsageTracking[]
  conversations Conversation[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Subscription {
  id                     String    @id @default(cuid())
  user_id                String
  plan                   String    @db.VarChar(50)
  status                 String    @db.VarChar(50)
  stripe_customer_id     String?   @db.VarChar(255)
  stripe_subscription_id String?   @db.VarChar(255)
  current_period_start   DateTime? @db.Timestamp(6)
  current_period_end     DateTime? @db.Timestamp(6)
  
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model UsageTracking {
  id             String @id @default(cuid())
  user_id        String
  month          Int
  year           Int
  messages_used  Int    @default(0)
  messages_limit Int    @default(5)
  
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("usage_tracking")
}

model Conversation {
  id         String    @id @default(cuid())
  user_id    String
  title      String?   @db.VarChar(255)
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  
  user     User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("conversations")
}

model Message {
  id              String   @id @default(cuid())
  conversation_id String
  role            String   @db.VarChar(50)
  content         String   @db.Text
  tokens_used     Int?
  timestamp       DateTime @default(now()) @db.Timestamp(6)
  
  conversation Conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)

  @@map("messages")
}
